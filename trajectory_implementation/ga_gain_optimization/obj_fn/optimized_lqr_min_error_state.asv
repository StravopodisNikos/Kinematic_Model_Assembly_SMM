function [torque_norm_star] = optimized_lqr_min_error_state(structure,assembly_parameters,isotropic_anatomy_extracted,way_pts,time_pts,x)
% Trajectory Implementation on Isotropic Extracted anatomies
% Anatomy optimization was performed in:
% ga_call_anatomy_optimization_isotropy_investigation.m

% In this file the lqr matrices are ga optimized w.r.t:
% Achieving minimal position error for all joints at each task point
% specified
% * Modified on Monday 28/12 -> max_torque_norm is minimized  

% *  WORKS ONLY FOR 3 DOF STRUCTURES
% ** LQR CONTROL IMPLEMENTATION

% This file was developed from:
% optimized_structure_anatomy_trajectory_implementation_custom2.m

% Input: 1. structure string definition 7x1
%        2. structure assembly parameters 4x3 array
%        3. isotropic_anatomy_extracted
%        4. way_pts must be nxp array (n:DoF, p:number of trajectory points)
%        5. time_pts must be px1 array
%        6. chromosome x -> builds the s_lqr struct with Q,R,N matrices

% Output: 1. Position Error Minimization Index

% Author: Nikolaos Stravopodis

% Research on Optimal Trajectory Implementation of SMM 

%% Add paths to all functions:
% Obtain matlab_ws folder path on the pc
current_path = cd; % pc-grafeio
root_path = string(split(current_path,'matlab_ws'));
root_path = root_path(1);

% Add libraries relative to matlab_ws folder
screws_path_relative_to_matlab_ws = fullfile('matlab_ws','screw_kinematics_library','screws',filesep);
screws_library_path = strcat(root_path,screws_path_relative_to_matlab_ws); addpath(screws_library_path);
% addpath('/home/nikos/matlab_ws/screw_kinematics_library/screws')

util_path_relative_to_matlab_ws = fullfile('matlab_ws','screw_kinematics_library','util',filesep);
util_library_path = strcat(root_path,util_path_relative_to_matlab_ws); addpath(util_library_path);
% addpath('/home/nikos/matlab_ws/screw_kinematics_library/util')

screw_dynamics_path_relative_to_matlab_ws = fullfile('matlab_ws','screw_dynamics',filesep);
screw_dynamics_library_path = strcat(root_path,screw_dynamics_path_relative_to_matlab_ws); addpath(screw_dynamics_library_path);
% addpath('/home/nikos/matlab_ws/screw_dynamics')

ga_building_functions_path_relative_to_matlab_ws = fullfile('matlab_ws','Kinematic_Model_Assembly_SMM','building_functions',filesep);
ga_building_functions_library_path = strcat(root_path,ga_building_functions_path_relative_to_matlab_ws); addpath(ga_building_functions_library_path);
% addpath('/home/nikos/matlab_ws/Kinematic_Model_Assembly_SMM/building_functions')

ga_synthetic_joints_tfs_path_relative_to_matlab_ws = fullfile('matlab_ws','Kinematic_Model_Assembly_SMM','synthetic_joints_tfs',filesep);
ga_synthetic_joints_tfs_library_path = strcat(root_path,ga_synthetic_joints_tfs_path_relative_to_matlab_ws); addpath(ga_synthetic_joints_tfs_library_path);
% addpath('/home/nikos/matlab_ws/Kinematic_Model_Assembly_SMM/synthetic_joints_tfs')

ga_calculateFunctions_path_relative_to_matlab_ws = fullfile('matlab_ws','Kinematic_Model_Assembly_SMM','calculateFunctions',filesep);
ga_calculateFunctions_library_path = strcat(root_path,ga_calculateFunctions_path_relative_to_matlab_ws); addpath(ga_calculateFunctions_library_path);
% addpath('/home/nikos/matlab_ws/Kinematic_Model_Assembly_SMM/calculateFunctions')

ga_objective_functions_path_relative_to_matlab_ws = fullfile('matlab_ws','Kinematic_Model_Assembly_SMM','ga_objective_functions',filesep);
ga_objective_functions_library_path = strcat(root_path,ga_objective_functions_path_relative_to_matlab_ws); addpath(ga_objective_functions_library_path);
% addpath('/home/nikos/matlab_ws/Kinematic_Model_Assembly_SMM/ga_objective_functions')

ga_optimization_call_functions_path_relative_to_matlab_ws = fullfile('matlab_ws','Kinematic_Model_Assembly_SMM','ga_optimization_call_functions',filesep);
ga_optimization_call_functions_library_path = strcat(root_path,ga_optimization_call_functions_path_relative_to_matlab_ws); addpath(ga_optimization_call_functions_library_path);
% addpath('/home/nikos/matlab_ws/Kinematic_Model_Assembly_SMM/ga_optimization_call_functions')

subroutines_executed_in_objective_fn_path_relative_to_matlab_ws = fullfile('matlab_ws','Kinematic_Model_Assembly_SMM','ga_objective_functions','subroutines_executed_in_objective_fn',filesep);
subroutines_executed_in_objective_fn_library_path = strcat(root_path,subroutines_executed_in_objective_fn_path_relative_to_matlab_ws); addpath(subroutines_executed_in_objective_fn_library_path);
% addpath('/home/nikos/matlab_ws/Kinematic_Model_Assembly_SMM/ga_objective_functions/subroutines_executed_in_objective_fn')

% Add libraries relative to matlab_ws folder
motion_control_state_derivative_fn_path_relative_to_matlab_ws = fullfile('matlab_ws','Kinematic_Model_Assembly_SMM','trajectory_implementation','motion_control_state_derivative_fn',filesep);
motion_control_state_derivative_fn_library_path = strcat(root_path,motion_control_state_derivative_fn_path_relative_to_matlab_ws); addpath(motion_control_state_derivative_fn_library_path);
% addpath('/home/nikos/matlab_ws/Kinematic_Model_Assembly_SMM/trajectory_implementation/motion_control_state_derivative_fn')

%% Form s_lqr from chromosome x
q_eps  = [x(1) x(2) x(3)];    % penaltizes high integral error
q_e    = [x(4) x(5) x(6)];    % penaltizes position error
q_de   = [x(7) x(8) x(9)];          % penaltizes velocity error
r_pen1   = x(10);         % only testing
r_pen2   = x(11);     
r_pen3   = x(12);      
field1 = 'Qpen';        value1 = diag(horzcat(q_eps,q_e,q_de)); % 9x9
field2 = 'Rpen';        value2 = diag([r_pen1 r_pen2 r_pen3]);  % 3x3    
field3 = 'Nnonlin';     value3 = zeros(9,3);
s_lqr  = struct(field1,value1,field2,value2,field3,value3);

%% MASS BALANCED STRUCTURE & ISOTROPIC ANATOMY ARE PASSED AS ARGUMENTS!

% fix anatomy vector for the given structure(it is needed because in ga a fixed number of pseudos is optimized!)
isotropic_anatomy_structure_dependent = calculate_transformed_anatomy_vector(structure,'3dof',isotropic_anatomy_extracted);

%% BUILD REFERENCE ANATOMY
[xi_ai_ref,xi_pj_ref,~,~,~,~,~,~] = structure_assembly_3dof(structure,assembly_parameters);

% BUILD ISOTROPIC ANATOMY
[~,xi_ai_anat,M_s_com_k_i_anat,g_s_com_k_i_anat] = calculateCoM_ki_s_structure_anatomy_no_graph(structure,assembly_parameters,isotropic_anatomy_structure_dependent,xi_pj_ref);

% EXTRACT INERTIAS
[g_s_link_as_anat,M_s_link_as_anat] = calculateCoMmetalinks(M_s_com_k_i_anat,g_s_com_k_i_anat);

% CALCULATE Metalink Inertia Matrix|Body frame
[M_b_link_as2] = calculateMetalinkInertiaMatrixBody(g_s_link_as_anat,M_s_link_as_anat);

% DEFINE PARAMETERS TO BE PASSED TO compute_Mij_429_3DoF INSIDE ODE
% DERIVATIVE
for i_cnt=1:size(xi_ai_ref,2)
    g_sli_anat(:,:,i_cnt) = eye(4);
    g_sli_anat(1:3,4,i_cnt) = g_s_link_as_anat(:,1,i_cnt); % par4->tranform matrix of the CoMi of eac link @ ZERO q
end
Pi_for_old(:,:,1) = eye(4); Pi_for_old(:,:,2) = eye(4);    % par3->passive exponentials(it may look dummy but because fn was written for fixed structure and variable anatomy the reference structure twists were recomputed for each anatomy inside the function! poor programming...)
%par1->xi_ai_anat
%par5->M_b_link_as2
% par2+6 are calculated inside ODE DERIVATIVE!
field1 = 'par1'; value1 = xi_ai_anat;
field2 = 'par2'; value2 = zeros(4, 4, size(xi_ai_ref,2)); % just preallocation for expai
field3 = 'par3'; value3 = Pi_for_old;
field4 = 'par4'; value4 = g_sli_anat;
field5 = 'par5'; value5 = M_b_link_as2;
field6 = 'par6'; value6 = zeros(3,1); % just preallocation for dq
s_for_compute_Mij_429_3DoF = struct(field1,value1,field2,value2,field3,value3,field4,value4,field5,value5,field6,value6);

%% Ovidius robot spaecifications 
dq_max(1) = 10; %[rad/s]
dq_max(2) = 20; %[rad/s]
dq_max(3) = 20; %[rad/s]
ddq_max(1) = 100; %[rad/s2]
ddq_max(2) = 200; %[rad/s2]
ddq_max(3) = 200; %[rad/s2]
nDoF = 3;

% DEFINE TASK->in main ga call file!

% sampling times is a mx1 vector
dt = 0.25;
time_samples = time_pts(1):dt:time_pts(length(time_pts));

% Set angular velocity boundaries as a nxp array
dq_bound = zeros(nDoF,length(time_pts));
dq_bound_set =  dq_max'; 
for i_cnt=1:length(time_pts)
    dq_bound(:,i_cnt) = dq_bound_set;
end

% Set angular acceleration boundaries as a nxp array
ddq_bound = zeros(nDoF,length(time_pts));
ddq_bound_set =  ddq_max'; 
for i_cnt=1:length(time_pts)
    ddq_bound(:,i_cnt) = ddq_bound_set;
end

%% EXTRACT TRAJECTORY -> THIS IS REFERENCE FOR EXECUTION COMMANDS
% desired(reference) arrays dimension is: ndofxtask_points (3x5)
[q_d, dq_d, ddq_d, ~] = quinticpolytraj(way_pts, time_pts, time_samples);

%% EXECUTION - USING ODE
ode_calc_points    = 10;
torque_norm_final  = zeros(size(q_d,2),ode_calc_points);
torque_norm_finals = zeros(size(q_d,2),1);

for task_point_cnt=2:size(q_d,2)
    % set new execution time
%     tspan = [time_samples(task_point_cnt-1) time_samples(task_point_cnt)];
    tspan_discrete_ode = linspace(time_samples(task_point_cnt-1),time_samples(task_point_cnt),ode_calc_points);
    
    % set new initial state
    if task_point_cnt == 2
        x0(1:3) = q_d(:,task_point_cnt-1);
        x0(4:6) = dq_d(:,task_point_cnt-1);
    else
        x0(1:3) = last_x(1:3);
        x0(4:6) = last_x(4:6);        
    end
    
    % set new desired state
    x_d     =  vertcat(q_d(:,task_point_cnt), dq_d(:,task_point_cnt));
    ode_derivative_Fcn = @(t,x) LQR_computed_torque_control_3DoF_MMD(x_d,ddq_d(:,task_point_cnt),x,dt,s_lqr);
    [t,x] = ode113(ode_derivative_Fcn, tspan_discrete_ode, x0);
   
     % calculate torque for the [t,x] trajectory segment calculated by ODE
    Vold = calculatePotentialEnergyMatrix_anat_3dof(x0(1:3),xi_ai_anat,g_sli_anat,M_b_link_as2);
    torque_norm_new = zeros(1,size(t,1));
    for ode_cnt=1:size(t,1)
        [torque_norm_new(ode_cnt)] = postODEoutput_LQR_computed_torque_control2_3DoF_MMD(x(ode_cnt,:)',x_d,ddq_d(:,task_point_cnt),dt,s_for_compute_Mij_429_3DoF,s_lqr,Vold);
    end
    
    % save last x to pass as initial state for next step
    last_x = x(size(t,1),:);
    
    % Max Norm of torque commands(controller out->motor in) as discussed in
    % p.263 Munro-Lewis
    torque_norm_final(task_point_cnt,:) = torque_norm_new;                          % row is all segment
    torque_norm_finals(task_point_cnt)  = max(torque_norm_final(task_point_cnt,:)); % max of the row is the max value of segment
end

% Now that the max values on each segment are retrieved->apply statistics
% 1. avg of max -> min _>Results evaluation shows that sends torques to
% <2Nm!!! 
% torque_norm_star = sum(torque_norm_finals)/size(torque_norm_finals,1);
% 2. I want the avg to be close to max torques norm
max_torques = [100 45 45]';
max_torques_norm = norm(max_torques);
avg_torques_normsum(torque_norm_finals)/size(torque_norm_finals,1);
torque_norm_star = abs(max_torques_norm - )
end